{"version":3,"sources":["App.js","reducer.js","index.js"],"names":["Student","student","onUpdate","onDelete","useState","name","setName","className","id","type","value","onChange","event","target","onClick","connect","state","ownProps","students","dispatch","props","Object","values","map","key","initialState","reducer","action","newState","item","filter","console","log","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"kRAIIA,EAAU,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACzBC,mBAAUH,EAAQI,MADO,mBAC1CA,EAD0C,KACpCC,EADoC,KAEjD,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,MAAMN,EAAQO,IAC7B,yBAAKD,UAAU,QACb,2BAAOE,KAAK,OAAOC,MAAOL,EAAMM,SAAW,SAAAC,GAAK,OAAIN,EAASM,EAAMC,OAAOH,WAE5E,4BAAQH,UAAU,aAAaO,QAAU,WACvCZ,EAAU,CACRM,GAAIP,EAAQO,GACZH,KAAMA,MAHV,UAMA,4BAAQE,UAAU,aAAaO,QAAU,WACvCX,EAAUF,EAAQO,MADpB,YA0CSO,eAfS,SAACC,EAAOC,GAC9B,MAAO,CACLC,SAAUF,MAKY,SAAAG,GACxB,MAAO,CACLjB,SAAU,SAAEQ,GAAF,OAAaS,EAAU,CAAEV,KAAM,SAAUC,MAAOA,KAC1DP,SAAU,SAAEO,GAAF,OAAaS,EAAU,CAAEV,KAAM,SAAUC,MAAOA,QAK/CK,EAlCL,SAAEK,GAAY,IAEjBF,EAAYE,EAAZF,SACAhB,EAAsBkB,EAAtBlB,SAAUC,EAAYiB,EAAZjB,SAEf,OACE,yBAAKI,UAAU,YACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,MAAf,MACA,yBAAKA,UAAU,QAAf,SAGAc,OAAOC,OAAQJ,GAAWK,KAAK,SAAAtB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAASC,SAAUA,EAAUC,SAAUA,EAAUqB,IAAKvB,EAAQO,Y,eCrC5HiB,EAAe,CAAC,CACdjB,GAAI,IACJH,KAAM,UACR,CACEG,GAAI,IACJH,KAAM,WACR,CACEG,GAAI,IACJH,KAAM,SACR,CACEG,GAAI,IACJH,KAAM,UACR,CACEG,GAAI,IACJH,KAAM,SACR,CACEG,GAAI,IACJH,KAAM,QACR,CACEG,GAAI,IACJH,KAAM,UAsCCqB,EAlCC,WAAqC,IAAnCV,EAAkC,uDAA1BS,EAAcE,EAAY,uCAG5CC,EAAQ,eAAOZ,GAGnB,OAAQW,EAAOlB,MAEX,IAAK,SACGmB,EAAWP,OAAOC,OAAQM,GAAWL,KAAK,SAAAM,GAItC,OAHIA,EAAKrB,KAAOmB,EAAOjB,MAAMF,KACzBqB,EAAKxB,KAAOsB,EAAOjB,MAAML,MAEtBwB,KAEf,MAEJ,IAAK,SACGD,EAAWP,OAAOC,OAAQM,GAAWE,QAAQ,SAAAD,GACzC,OAAIA,EAAKrB,KAAOmB,EAAOjB,SAYvC,OAHAqB,QAAQC,IAAK,WACbD,QAAQC,IAAKJ,GAENA,GCvCLK,EAAQC,YAAaR,GAG3BS,IAASC,OACR,kBAAC,IAAD,CAAUH,MAAOA,GAChB,kBAAC,EAAD,OAEDI,SAASC,eAAe,W","file":"static/js/main.03e70e04.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\n\nlet Student = ( {student, onUpdate, onDelete} ) => {\n  const [name, setName] = useState( student.name );\n  return (\n    <div className=\"row\">\n      <div className=\"id\">{student.id}</div>\n      <div className=\"name\">\n        <input type=\"text\" value={name} onChange={ event => setName( event.target.value ) } />\n      </div>\n      <button className=\"btn-update\" onClick={ () => {\n        onUpdate( {\n          id: student.id,\n          name: name,\n        } )\n      }}>Update</button>\n      <button className=\"btn-delete\" onClick={ () => {\n        onDelete( student.id )\n      }}>Delete</button>\n    </div>\n  )\n}\n\n// Step 1: Define component.\nlet App = ( props ) => {\n\n  let {students} = props;\n  let {onUpdate, onDelete} = props;\n\n  return (\n    <div className=\"students\">\n      <div className=\"row headings\">\n        <div className=\"id\">ID</div>\n        <div className=\"name\">Name</div>\n      </div>\n      {\n        Object.values( students ).map( student => <Student student={student} onUpdate={onUpdate} onDelete={onDelete} key={student.id} /> )\n      }\n    </div>\n  );\n}\n\n// Step 2: Map state to props.\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    students: state\n  };\n};\n\n// Step 3: Map dispatch to props.\nconst mapDispachToProps = dispatch => {\n  return {\n    onUpdate: ( value ) => dispatch( { type: \"UPDATE\", value: value } ),\n    onDelete: ( value ) => dispatch( { type: \"DELETE\", value: value } ),\n  };\n};\n\n// Step 4: Pass mapping functions and our app into the `connect()`` function.\nexport default connect(mapStateToProps, mapDispachToProps)(App);","// Step 1: Initialize State.\r\nconst initialState = [{\r\n        id: '1',\r\n        name: 'Mahesh',\r\n    },{\r\n        id: '2',\r\n        name: 'Swapnil',\r\n    },{\r\n        id: '3',\r\n        name: 'Rohit',\r\n    },{\r\n        id: '4',\r\n        name: 'Deepak',\r\n    },{\r\n        id: '5',\r\n        name: 'Rushi',\r\n    },{\r\n        id: '6',\r\n        name: 'Bala',\r\n    },{\r\n        id: '7',\r\n        name: 'Uttam',\r\n    }]\r\n\r\n// Step 2: Define reducer.\r\nconst reducer = ( state = initialState, action ) => {\r\n\r\n\t// Keep whole old state in new variable.\r\n    let newState = {...state};\r\n\r\n    // Step 3: Perform redux actions/\r\n    switch( action.type ) {\r\n\r\n        case 'UPDATE':\r\n                newState = Object.values( newState ).map( item => {\r\n                    if( item.id === action.value.id ) {\r\n                        item.name = action.value.name;\r\n                    }\r\n                    return item;\r\n                });\r\n            break;\r\n\r\n        case 'DELETE':\r\n                newState = Object.values( newState ).filter( item => {\r\n                    if( item.id === action.value ) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n            break;\r\n\r\n    }\r\n\r\n    console.log( 'AFTER: ' );\r\n    console.log( newState );\r\n\r\n    return newState;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Step 1: Import 'App'.\nimport App from './App';\n\n// Step 2: Import `<Provider>` from `react-redux` library.\nimport { Provider } from 'react-redux';\n\n// Step 3: Import function `createStore` from `react` library.\nimport { createStore } from 'redux';\n\n// Step 4: Import our own reducer.\nimport reducer from './reducer';\n\n// Step 5: Create Store & Pass reducer.\nconst store = createStore( reducer );\n\n// Step 6: Wrap our `<App>` component with `<Provider>` component.\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}